load "files";
load "downloader";
load "std";

class Managers {
    Managers(logger) {
        this.foundPackages = [];
        this.logger = logger;
    }

    checkDir(foldername) {
        if (fexists(foldername)) {
            this.findPackages();
        } else {
            fmkdir(foldername);
            say "making dir.";
        }
    }

    findPackages() {
        this.foundPackages = flistDir("marn");
        return this.foundPackages;
    }



    finishedDownload(percentage, downloadedSize, totalSize) {
//        say "percentage: " + percentage + "%, downloadedSize: " + downloadedSize + ", totalSize: " + totalSize;
//        this.logger.out("-" * 10);
//        say getType(percentage);
//        let downloaded = "#" * (percentage / 10);
//        let left = "-" * (10 - (percentage / 10));
//        this.logger.out(downloaded + left);
    }

    downloader(link, path) {
        this.checkDir("./marn/" + path);
        download(link, "./marn/" + path + "/" + path + ".mni", this.finishedDownload);
        this.writeToFile(path);
    }

    internal writeToFile(filename) {
        let path = "./marn/" + filename + "/" + filename + ".mni";
        let handlerFile = "./marn/imports.mni";
        let lines = split(fread(handlerFile), NL);
        let importStatement = "load '" + path + "';" + NL;
        lines.add(importStatement);
        let File = fopen(handlerFile);
        for (line : lines) {
            fwrite(File, line, "A");
        }
//        fwrite(File, importStatement + "\n", "W");
    }

}
