load "arrays";
load "logger";
load "std";

class Marn {
    Marn( manager, packages ) {
        this.installed = [];
        this.required = [];
        this.toInstall = [];
        this.logger = newLogger();
        this.man = manager;
        this.pac = packages;
    }

    internal prepare( ) {
        if (this.man.marnExists( )) {
            this.installed = this.pac.findInstalled( );
        } else {
            this.man.createDir( "marn" );
        }
    }

    install(package) {
        this.prepare( );
        if ( this.toInstall.has( package ) ) {
            this.logger.log(2, package + " already installed. " + NL);
            return nil;
        }
        this.logger.setInfo("üåè Searching for : ");
        let url = "https://raw.githubusercontent.com/mani-language/Marn/master/modules/" + package + ".mni";
        say this.man.checkURL( url );
        if (this.man.checkURL( url )) {
            this.logger.log(0, "Found " + package);
        } else {
            this.logger.log(2, "Package not found!" + NL);   
        }
        this.logger.setInfo("üë∑ Downloading : ");
        this.logger.log(0, "Starting download of " + package + NL);
        this.man.downloader( package, url );
        this.logger.setInfo("üî® Installed :  ");
        this.logger.log(0, package);
    }

    writeOff() {
        // Getting all the installed again.
        this.installed = this.pac.findInstalled( );
        let File = fopen("./marn/imports.mni");
        fdel(File as "string"); // Making the file empty;
        for ( mod : this.installed ) {
            let parts = split(mod as "string", "/");
            
            let name = parts.at(1);
            if (name != "imports.mni") {
                let path = "./" + name + "/" + name + ".mni";
                let importStatement = 'load "' + path + '";' + NL;
                fwrite(File, importStatement, "a");
            }
        }
        say "Done";
    }
}
